// addTaskArtifactJar.gradle
def thisname = "addTaskArtifactJar"
println "Loading ${thisname}"

// http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.bundling.Jar.html
// http://stackoverflow.com/questions/19034466/how-to-create-a-jar-with-gradle-without-publicly-revealing-source-code
// http://stackoverflow.com/questions/16763090/how-to-export-library-to-jar-in-android-studio

// http://stackoverflow.com/questions/21434554/copying-apk-file-in-android-gradle-project
// http://stackoverflow.com/questions/19307341/android-library-gradle-release-jar


configurations {
    ArtifactJar
}

def androidApplicationProject = project.plugins.hasPlugin('android')
def androidLibraryProject = project.plugins.hasPlugin('android-library')

def artifactType = "Jar"
def artifactTypeName = "Java"

def variants
def variantsTypeName
if(androidApplicationProject) {
    variants = android.applicationVariants
    variantsTypeName = "Android Application"
}
if(androidLibraryProject) {
    variants = android.libraryVariants
    variantsTypeName = "Android Library"
}

if(androidApplicationProject || androidLibraryProject) {
    println ":${project.name}:${thisname} Detected a ${variantsTypeName} project."
    variants.all { variant ->
        def name = variant.name.capitalize()
        def taskname = "packageArtifact${name}${artifactType}"

        def task = project.tasks.create(taskname, Jar)
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        task.destinationDir = file('build/libs/')

        artifacts.add('archives', task);
        artifacts.add('ArtifactJar', task);
        println ":${project.name}:${thisname} Register ${artifactTypeName} Artifact. [${taskname}]"
    }
}



//android.libraryVariants.all { variant ->
//    File sourceFolder
//    variant.getSourceSets().each { sourceProvider ->
//        println "EEEEEE: " + sourceProvider.getJavaDirectories()
//        
//        //sourceFolder += files(sourceProvider.getJavaDirectories())
//    }
//    //variant.addJavaSourceFoldersToModel(sourceFolder)
//}


//BaseVariant
//addJavaSourceFoldersToModel
//registerJavaGeneratingTask

// variant.name.capitalize()


//task artifactJar(type: Jar) {
//    // TODO: Dummy
//    extension = 'jar'
//    destinationDir = file('build/libs/')
//}

/*
task compileArtifactJava(type: JavaCompile) {
    dependsOn build
    source = files(project.android.sourceSets.main.allJava)
    classpath = project.files(android.plugin.getRuntimeJarList().join(File.pathSeparator)) + configurations.compile
    destinationDir = file('build/java/')
}
*/






/*
task artifactJar(type: Jar) {
    //dependsOn build
    //from 'build/classes/release/'
    from "src"
    extension = 'jar'
    destinationDir = file('build/libs/')
}
*/

//    println "START"
//    def tree = project.fileTree("src") //android.sourceSets.main.java.srcDirs
//        .include('**/*.*')
//    tree.each { file ->
//        println file
//    }
//    println "END"





/*
// http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Delete.html
task deleteArtifactJar(type: Delete) {
    delete artifactJar.archivePath
}

task copyArtifactJar(type: Copy) {
    dependsOn deleteArtifactJar, build
    from 'build/bundles/release/'
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', artifactJar.archiveName)
}
*/






/*
// http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Copy.html
task copyArtifactJar(type: Copy) {
    dependsOn deleteArtifactJar
    from 'build/bundles/release/'
    into('build/libs/')
    include('classes.jar')
    rename ('classes.jar', temporaryArtifactJar.archiveName)
}

task artifactJar(type: ArtifactAndroidJarTask) {
    dependsOn copyArtifactJar
}


import org.gradle.api.internal.file.copy.CopyAction;

class ArtifactAndroidJarTask extends AbstractArchiveTask {
    public static final String DEFAULT_EXTENSION = 'jar'

    ArtifactAndroidJarTask() {
        println "TEST TEST!: " + temporaryArtifactJar.getArchiveName()
        this.setArchiveName(temporaryArtifactJar.getArchiveName())
    }

    @Override
    protected CopyAction createCopyAction() {
    }

}
*/



// LibraryVariantFactory: create classes.jar task = "package${fullName.capitalize()}Jar"




/*
import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

class ArtifactAndroidJarTask extends DefaultTask {
    @TaskAction
    def artifact() {
        def name = temporaryArtifactJar.getName()
        def extension = temporaryArtifactJar.getExtension()
        def type = temporaryArtifactJar.getType()
        def classifier = temporaryArtifactJar.getClassifier()
        def date = temporaryArtifactJar.getDate()
        def file = new File(temporaryArtifactJar.destinationDir, temporaryArtifactJar.archiveName)

        println "name=${name}, extension=${extension}, type=${type}, classifier=${classifier}, date=${date}, file=${file}"
        return new DefaultPublishArtifact(name, extension, type, classifier, date, file)
    }
}
*/





/*
task artifactJar(type: Jar) {
    dependsOn build
    from 'build/classes/release/'
    extension = 'jar'
    destinationDir = file('build/libs/')
}


        * What went wrong:
        Circular dependency between the following tasks:
        :ormlite-content-provider-library:artifactJar
        \--- :ormlite-content-provider-library:build
             \--- :ormlite-content-provider-library:assemble
                  \--- :ormlite-content-provider-library:artifactJar (*)

        (*) - details omitted (listed previously)
*/






/*
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

// https://groups.google.com/forum/#!topic/adt-dev/zIOJigPI-0Y
// https://android.googlesource.com/platform/tools/base/+/13a1c5ad2849cfdd6b1747639d07d24923995f17/build-system/tests/artifactApi/build.gradle
import com.android.builder.model.ArtifactMetaData
import com.android.builder.model.SourceProvider
import com.android.builder.model.BuildType
import com.android.build.gradle.internal.dsl.BuildTypeDsl

android.registerArtifactType("ArtifactAndroidJar", false, ArtifactMetaData.TYPE_JAVA)

android.buildTypes.all { type ->
    project.android.registerBuildTypeSourceProvider(
           "ArtifactAndroidJar",
           type,
           getProvider("buildType:$type.name")
           )
}

android.productFlavors.all { flavor ->
    project.android.registerProductFlavorSourceProvider(
            "ArtifactAndroidJar",
            flavor,
            getProvider("productFlavor:$flavor.name"))
}

def androidApplicationProject = project.plugins.hasPlugin('android')
def androidLibraryProject = project.plugins.hasPlugin('android-library')

if(androidApplicationProject) {
    println ":${project.name}:${thisname} Detected a Android Application project."
    project.android.applicationVariants.all { variant ->
        project.android.registerJavaArtifact(
            "ArtifactAndroidJar",
            variant,
            "assemble:$variant.name",
            "compile:$variant.name",
            configurations.default,
            new File("classesFolder:$variant.name"),
            getProvider("provider:$variant.name"))
    }
    println ":${project.name}:${thisname} Register Java Artifact. [artifactJar]"
}

if(androidLibraryProject) {
    println ":${project.name}:${thisname} Detected a Android Library project."
    project.android.libraryVariants.all { variant ->
        project.android.registerJavaArtifact(
            "ArtifactAndroidJar",
            variant,
            "assemble:$variant.name",
            "compile:$variant.name",
            configurations.default,
            new File("classesFolder:$variant.name"),
            getProvider("provider:$variant.name"))
    }
    println ":${project.name}:${thisname} Register Java Artifact. [artifactJar]"
}


public class SourceProviderImpl implements SourceProvider, Serializable {
    private static final long serialVersionUID = 1L;

    private final String name;

    SourceProviderImpl(String name) {
        this.name = name
    }

    String getName() {
        return this.name
    }

    File getManifestFile() {
        return new File(name)
    }

    Collection<File> getJavaDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getResourcesDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getAidlDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getRenderscriptDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getJniDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getJniLibsDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getResDirectories() {
        return Collections.emptyList()
    }

    Collection<File> getAssetsDirectories() {
        return Collections.emptyList()
    }
}

// If you use a default Gradle sourceSet you can use android.wrapJavaSourceSet(theSourceSet) to get a SourceProvider from a java source set.
SourceProvider getProvider(String name) {
   return new SourceProviderImpl(name)
}


//task artifactJar(type: ArtifactAndroidJar) {
task artifactJar(type: Jar) {
    extension = 'jar'
    destinationDir = file('build/libs/')
}

*/
