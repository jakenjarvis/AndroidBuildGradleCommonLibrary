// addTaskArtifactAar.gradle
def thisname = "addTaskArtifactAar"
println "Loading ${thisname}"

// http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.bundling.Zip.html

configurations {
    ArtifactAar
}

def androidLibraryProject = project.plugins.hasPlugin('android-library')

def artifactType = "Aar"
def artifactTypeName = "AAR"
def artifactClassifier = 'aar'

if(androidLibraryProject) {
    def variants = android.libraryVariants
    def variantsTypeName = "Android Library"

    println ":${project.name}:${thisname} Detected a ${variantsTypeName} project."
    variants.all { variant ->
        def name = variant.name.capitalize()
        def taskname = "packageArtifact${name}${artifactType}"
        //def copyTaskname = "copyArtifact${name}${artifactType}"

        def task = project.tasks.create(taskname, Zip)
        task.classifier = artifactClassifier
        task.extension = 'aar'
        //task.archiveName = new File(variant.outputFile.getCanonicalFile().getName())
        task.archiveName = commonlibrary.generateArchiveName(task, variant)
        //task.destinationDir = new File(variant.outputFile.getCanonicalFile().getParent())
        task.destinationDir = file("build/outputs/${task.classifier}/")

        // https://groups.google.com/forum/#!topic/adt-dev/4_-5NvxuFB0
        // No such property: outputFile for class: ***
        //variant.outputFile = task.archivePath

        //println "--------------------------------------------------"
        // http://stackoverflow.com/questions/27969060/get-application-version-from-manifest-in-android-studio-build-gradle
        // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
        //println "task.archivePath ${task.archivePath}"
        variant.outputs.each { output ->
            def File defaultOutputFile = output.outputFile
            //println "output.outputFile ${output.outputFile}"
            if(defaultOutputFile.getName().endsWith(".${task.extension}")) {
                output.outputFile = task.archivePath
            }
            //println "output.outputFile ${output.outputFile}"
        }
        //println "--------------------------------------------------"

        //def copytask = project.tasks.create(copyTaskname, Copy)
        //copytask.from(variant.outputFile)
        //copytask.into(file('build/libs/'))
        //copytask.rename { task.archiveName }

        task.dependsOn variant.assemble//, copytask
        variant.assemble.finalizedBy task

        //artifacts.add('archives', task);
        artifacts.add('ArtifactAar', task);
        println ":${project.name}:${thisname} Register ${artifactTypeName} Artifact. [${taskname}]"
    }
}
