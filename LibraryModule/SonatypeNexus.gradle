// SonatypeNexus.gradle
def thisname = "SonatypeNexus"
println "Loading ${thisname}"

apply plugin: SonatypeNexusPlugin

// original author: Benjamin Muschko
// https://github.com/bmuschko/gradle-nexus-plugin

import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.artifacts.Configuration
import org.gradle.api.artifacts.Dependency
import org.gradle.api.artifacts.maven.MavenDeployment
import org.gradle.api.execution.TaskExecutionGraph
import org.gradle.api.plugins.BasePlugin
import org.gradle.api.plugins.GroovyPlugin
import org.gradle.api.plugins.JavaPlugin
import org.gradle.api.plugins.MavenPlugin
import org.gradle.api.publish.maven.internal.dependencies.MavenDependencyInternal
import org.gradle.api.publish.maven.internal.publication.MavenPomInternal
import org.gradle.api.publish.maven.internal.publisher.MavenNormalizedPublication
import org.gradle.api.tasks.Upload
import org.gradle.api.tasks.bundling.Jar
import org.gradle.plugins.signing.SigningPlugin

import org.gradle.api.publish.PublishingExtension
import org.gradle.api.publish.PublicationContainer

import org.gradle.api.InvalidUserDataException;
import org.gradle.api.internal.DefaultPolymorphicDomainObjectContainer;
import org.gradle.api.publish.Publication;
import org.gradle.internal.reflect.Instantiator;
import org.gradle.internal.reflect.DirectInstantiator;

import org.gradle.internal.typeconversion.NotationParser;

import org.gradle.api.publish.maven.MavenArtifact;
import org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifact
import org.gradle.api.publish.maven.internal.artifact.DefaultMavenArtifactSet
import org.gradle.api.publish.maven.internal.publication.MavenPublicationInternal
import org.gradle.api.publish.maven.internal.publisher.MavenProjectIdentity;
import org.gradle.api.publish.maven.internal.publication.DefaultMavenProjectIdentity
import org.gradle.api.publish.maven.MavenPom;
import org.gradle.api.internal.artifacts.DefaultModuleVersionIdentifier;
import org.gradle.api.publish.maven.internal.publication.DefaultMavenPublication
import org.gradle.api.publish.internal.DefaultPublicationContainer
import org.gradle.api.internal.file.FileResolver
import org.gradle.api.publish.maven.internal.artifact.MavenArtifactNotationParserFactory
import org.gradle.api.publish.internal.PublicationInternal;

import org.gradle.api.publish.maven.internal.publication.DefaultMavenPom
import org.gradle.listener.ActionBroadcast;
import org.gradle.api.internal.UserCodeAction;

class SonatypeNexusPlugin implements Plugin<Project> {
    static final String ARCHIVES_CONFIGURATION = 'SonatypeNexusArchives'

    static final String NEXUS_USERNAME = 'nexusUsername'
    static final String NEXUS_PASSWORD = 'nexusPassword'

    private Project project
    private Instantiator instantiator
    private NotationParser<Object, MavenArtifact> artifactNotationParser
    private FileResolver fileResolver

    void apply(Project project) {
        project.plugins.apply(MavenPlugin)
        project.plugins.apply(SigningPlugin)

        this.project = project
        this.instantiator = project.getServices().get(Instantiator.class) //new DirectInstantiator()
        this.fileResolver = project.getFileResolver()
        this.artifactNotationParser = new MavenArtifactNotationParserFactory(this.instantiator, this.fileResolver).create();

        project.configurations.create(SonatypeNexusPlugin.ARCHIVES_CONFIGURATION)

        SonatypeNexusPluginExtension extension = project.extensions.create('nexus', SonatypeNexusPluginExtension, this)

        project.gradle.projectsEvaluated {
            configureTasks(project, extension)
            configureSigning(project, extension)
            //configurePom(project, extension)
            configureUpload(project, extension)
        }
        configurePom(project, extension)
    }

    public Project getProject() {
        return this.project
    }

    public Instantiator getInstantiator() {
        return this.instantiator
    }

    public NotationParser<Object, MavenArtifact> getArtifactNotationParser() {
        return this.artifactNotationParser
    }

    public FileResolver getFileResolver() {
        return this.fileResolver
    }

    private void configureTasks(Project project, SonatypeNexusPluginExtension extension) {
        //project.afterEvaluate {
            changeInstallTaskConfiguration(project, extension)
        //}
    }

    private void changeInstallTaskConfiguration(Project project, SonatypeNexusPluginExtension extension) {
        if(!extension.usesStandardConfiguration()) {
            if(project.tasks.findByName(MavenPlugin.INSTALL_TASK_NAME)) {
                project.tasks.getByName(MavenPlugin.INSTALL_TASK_NAME).configuration = project.configurations[extension.configuration]
            }
        }
    }

    private void configureSigning(Project project, SonatypeNexusPluginExtension extension) {
        //project.afterEvaluate {
            project.signing {
                configuration = project.configurations[extension.configuration]

                required {
                    project.gradle.taskGraph.hasTask(extension.getUploadTaskPath(project)) && !project.version.endsWith('SNAPSHOT')
                }

                sign project.configurations[extension.configuration]

                project.gradle.taskGraph.whenReady {
                    signPomForUpload(project, extension)
                    signInstallPom(project, extension)
                }
            }
        //}
    }

    private void signPomForUpload(Project project, SonatypeNexusPluginExtension extension) {
        def uploadTasks = project.tasks.withType(Upload).matching { it.path == extension.getUploadTaskPath(project) }

        uploadTasks.each { task ->
            task.repositories.mavenDeployer() {
                beforeDeployment { MavenDeployment deployment ->
                    project.signing.signPom(deployment)
                }
            }
        }
    }

    private void signInstallPom(Project project, SonatypeNexusPluginExtension extension) {
        def installTasks = project.tasks.withType(Upload).matching { it.path == extension.getInstallTaskPath(project) }

        installTasks.each { task ->
            task.repositories.mavenInstaller() {
                beforeDeployment { MavenDeployment deployment ->
                    project.signing.signPom(deployment)
                }
            }
        }
    }

    private void configurePom(Project project, SonatypeNexusPluginExtension extension) {
        project.ext.modifyPom = { Closure modification ->
            modification.resolveStrategy = Closure.DELEGATE_FIRST
            project.afterEvaluate {
                project.ext.poms.each {
                    it.whenConfigured { project.configure(it, modification) }
                }
            }
        }

        project.afterEvaluate {
            if(project.tasks.findByName(MavenPlugin.INSTALL_TASK_NAME)) {
                project.ext.poms = [project.tasks.getByName(MavenPlugin.INSTALL_TASK_NAME).repositories.mavenInstaller(),
                                    project.tasks.getByName(extension.uploadTaskName).repositories.mavenDeployer()]*.pom
            } else {
                project.ext.poms = [project.tasks.getByName(extension.uploadTaskName).repositories.mavenDeployer()]*.pom
            }
        }
    }

    private void configureUpload(Project project, SonatypeNexusPluginExtension extension) {
        //project.afterEvaluate {
            project.tasks.getByName(extension.uploadTaskName).repositories.mavenDeployer() {
                project.gradle.taskGraph.whenReady { TaskExecutionGraph taskGraph ->
                    if(taskGraph.hasTask(extension.getUploadTaskPath(project))) {

                        println "ZZZZZZZZZZZZZZZZZ"

                        if(extension.targetLocalRepository) {
                            if(extension.localRepository) {
                                repository(url: extension.localRepository)
                            }

                        } else {
                            Console console = System.console()

                            String nexusUsername = project.hasProperty(NEXUS_USERNAME) ?
                                                   project.property(NEXUS_USERNAME) :
                                                   console.readLine('\nPlease specify username: ')

                            String nexusPassword = project.hasProperty(NEXUS_PASSWORD) ?
                                                   project.property(NEXUS_PASSWORD) :
                                                   new String(console.readPassword('\nPlease specify password: '))

                            if(extension.repositoryUrl) {
                                repository(url: extension.repositoryUrl) {
                                    authentication(userName: nexusUsername, password: nexusPassword)
                                }
                            }

                            if(extension.snapshotRepositoryUrl) {
                                snapshotRepository(url: extension.snapshotRepositoryUrl) {
                                    authentication(userName: nexusUsername, password: nexusPassword)
                                }
                            }
                        }

                    }
                }
            }
        //}
    }

    /**
     * Checks to see if Java plugin got applied to project.
     *
     * @param project Project
     * @return Flag
     */
    private boolean hasJavaPlugin(Project project) {
        project.plugins.hasPlugin(JavaPlugin)
    }

    /**
     * Checks to see if Groovy plugin got applied to project.
     *
     * @param project Project
     * @return Flag
     */
    private boolean hasGroovyPlugin(Project project) {
        project.plugins.hasPlugin(GroovyPlugin)
    }
}

class SonatypeNexusPluginExtension {
    //String configuration = Dependency.ARCHIVES_CONFIGURATION
    String configuration = SonatypeNexusPlugin.ARCHIVES_CONFIGURATION

    Boolean targetLocalRepository = false

    String localRepository
    String repositoryUrl
    String snapshotRepositoryUrl

    private SonatypeNexusPlugin plugin
    private SonatypeNexusMavenPublication mavenPublication;

    SonatypeNexusPluginExtension(plugin) {
        this.plugin = plugin
        Project project = this.plugin.getProject()

        this.localRepository = new File("${project.rootDir}/repository").toURI().toString()
        this.repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        this.snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'

        this.mavenPublication = this.plugin.getInstantiator().newInstance(
                SonatypeNexusMavenPublication.class,
                    project,
                    SonatypeNexusPlugin.ARCHIVES_CONFIGURATION,
                    this.plugin.getArtifactNotationParser(),
                    this.plugin.getInstantiator());
    }

    public SonatypeNexusMavenPublication getPublication() {
        return mavenPublication;
    }

    def publication(Action<SonatypeNexusMavenPublication> configure) {
        configure.execute(mavenPublication);
    }

    def nexus(Closure closure) {
        closure.delegate = this
        closure()
    }

    String getUploadTaskName() {
        "upload${configuration.capitalize()}"
    }

    String getUploadTaskPath(Project project) {
        isRootProject(project) ? ":$uploadTaskName" : "$project.path:$uploadTaskName"
    }

    String getInstallTaskPath(Project project) {
        isRootProject(project) ? ":$MavenPlugin.INSTALL_TASK_NAME" : "$project.path:$MavenPlugin.INSTALL_TASK_NAME"
    }

    private boolean isRootProject(Project project) {
        project.rootProject == project
    }

    void setConfiguration(config) {
        configuration = config instanceof Configuration ? config.name : config
    }

    boolean usesStandardConfiguration() {
        configuration == Dependency.ARCHIVES_CONFIGURATION
    }
}

public class SonatypeNexusMavenPublication implements MavenPublication, PublicationInternal {
    private final Project project
    private final String name
    private final MavenPomInternal pom;
    private final MavenProjectIdentity projectIdentity
    private final DefaultMavenArtifactSet mavenArtifacts
    private FileCollection pomFile;

    public SonatypeNexusMavenPublication(Project project, String name, NotationParser<Object, MavenArtifact> mavenArtifactParser, Instantiator instantiator) {
        this.project = project
        this.name = name
        this.projectIdentity = new DefaultMavenProjectIdentity(project.group.toString(), project.name, project.version.toString())
        this.mavenArtifacts = instantiator.newInstance(DefaultMavenArtifactSet.class, name, mavenArtifactParser)
        this.pom = instantiator.newInstance(SonatypeNexusMavenPom.class, this);

        //this.mavenArtifacts.whenObjectAdded { artifact ->
        //    project.artifacts.add(name, artifact)
        //}
    }

    @Override
    String getName() {
        return name;
    }

    @Override
    MavenPom getPom() {
        return pom;
    }

    public void setPomFile(FileCollection pomFile) {
        this.pomFile = pomFile;
    }

    @Override
    public void pom(Action<? super MavenPom> configure) {
        configure.execute(pom);
    }

    @Override
    void from(SoftwareComponent softwareComponent) {
        throw new UnsupportedOperationException()
    }

    @Override
    public MavenArtifact artifact(Object source) {
        println "DDDDDAAAAAAA"
        this.project.artifacts.add(this.name, source)
        return mavenArtifacts.artifact(source);
    }

    @Override
    public MavenArtifact artifact(Object source, Action<? super MavenArtifact> config) {
        println "DDDDDBBBBBBB"
        this.project.artifacts.add(this.name, source)
        return mavenArtifacts.artifact(source, config);
    }

    @Override
    public MavenArtifactSet getArtifacts() {
        return mavenArtifacts;
    }

    @Override
    public void setArtifacts(Iterable<?> sources) {
        mavenArtifacts.clear();
        for (Object source : sources) {
            artifact(source);
        }
    }

    @Override
    public String getGroupId() {
        return projectIdentity.getGroupId();
    }

    @Override
    public void setGroupId(String groupId) {
        projectIdentity.setGroupId(groupId);
    }

    @Override
    public String getArtifactId() {
        return projectIdentity.getArtifactId();
    }

    @Override
    public void setArtifactId(String artifactId) {
        projectIdentity.setArtifactId(artifactId);
    }

    @Override
    public String getVersion() {
        return projectIdentity.getVersion();
    }

    @Override
    public void setVersion(String version) {
        projectIdentity.setVersion(version);
    }

    @Override
    ModuleVersionIdentifier getCoordinates() {
        return new DefaultModuleVersionIdentifier(getGroupId(), getArtifactId(), getVersion());
    }

}

public class SonatypeNexusMavenPom implements MavenPomInternal {
    private final ActionBroadcast<XmlProvider> xmlAction = new ActionBroadcast<XmlProvider>();
    private final SonatypeNexusMavenPublication mavenPublication;
    private String packaging;

    public SonatypeNexusMavenPom(SonatypeNexusMavenPublication mavenPublication) {
        this.mavenPublication = mavenPublication;
    }

    @Override
    public void withXml(Action<? super XmlProvider> action) {
        xmlAction.add(new UserCodeAction<XmlProvider>("Could not apply withXml() to generated POM", action));
    }

    @Override
    public Action<XmlProvider> getXmlAction() {
        return xmlAction;
    }

    @Override
    public String getPackaging() {
        return null //GUtil.elvis(packaging, mavenPublication.determinePackagingFromArtifacts());
    }

    @Override
    public void setPackaging(String packaging) {
        this.packaging = packaging;
    }

    @Override
    public MavenProjectIdentity getProjectIdentity() {
        return null //mavenPublication.getMavenProjectIdentity();
    }

    @Override
    public Set<MavenDependencyInternal> getRuntimeDependencies() {
        return null //mavenPublication.getRuntimeDependencies();
    }

}
